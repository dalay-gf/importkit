<?php

// Строка - обозначение регионов и нац. валют.
define('GF_STOCK_REGION_ALL', 'all');
define('GF_STOCK_REGION_RU', 'Russia');
define('GF_STOCK_REGION_CN', 'China');
define('GF_STOCK_CURRENCY_CN', 'юан');
define('GF_STOCK_CURRENCY_RU', 'руб');


/**
 * Переводим в нужную валюту(соответственно настроек) региональные ценники.
 */
function _gf_stock_convert_to_default_currency($sum, $sum_currency){
  $default_currency = drupal_strtolower(variable_get('gf_stock_region_price_currency', 
    GF_STOCK_CURRENCY_CN));
  $sum_currency = drupal_strtolower($sum_currency);
  if ($default_currency !== $sum_currency) {
    $exchange_rate = variable_get('gf_stock_yuan_exchange_rate');
    switch ($default_currency) {
    case GF_STOCK_CURRENCY_CN:
      return ($sum / $exchange_rate);
    case GF_STOCK_CURRENCY_RU:
      return ($sum * $exchange_rate);
    }
  }
  return $sum;
}


/**
 * Implements hook_importkit_price().
 */
function gf_stock_importkit_price($entity, $xml_element){
  // Обновление/импорт данных о ценах по регионам.
  $prices = $xml_element->Цены->Цена;
  foreach ($prices as $price) {
    db_merge('gf_stock_prices')
      ->key(array(
        'nid' => $entity->nid,
        'price_id' => $price->ИдТипаЦены)
      )->fields(array(
        'price' => $price->ЦенаЗаЕдиницу,
        'currency' => $price->Валюта,
      ))
      ->execute();
  }
}


/**
 * Implements hook_node_delete().
 */
function gf_stock_node_delete($node) {
  // При удалении ноды удаляем запись с оной из таблицы
  // с ценами регионов.
  db_delete('gf_stock_prices')
    ->condition('nid', $node->nid)
    ->execute();
}


/**
 * Implements hook_importkit_import_finished().
 */
function gf_stock_importkit_import_finished() {
  variable_del('gf_stock_importkit_started');
}


/**
 * Implements hook_importkit_stock().
 */
function gf_stock_importkit_stock($entity, $xml_element){
  $import_started_flag = variable_get('gf_stock_importkit_started', FALSE);
  if (!$import_started_flag) {
    // При начале импорта очищаем таблицу остатков.
    db_truncate('gf_stock_stocks')->execute();
    variable_set('gf_stock_importkit_started', TRUE);
  }
  // Обновляем при импорте данные по остаткам в регионах.
  foreach($xml_element->Остатки->ОстаткиСклада as $element) {
    // Запись в таблицу importkit_cml_stock оставляем на
    // случай ее использования другими неведомыми модулями.
    // В нашем она будет нафиг не нужна.
    // db_merge('importkit_cml_stock')->key(array(
    //   'guid1' => $entity->guid1,
    //   'guid2' => $entity->guid2,
    //   'nid' => $entity->nid,
    //   'warehouse' => (string) $element->ИдСклада,
    // ))->fields(array(
    //   'stock' => (string) $element->Остаток,
    //   'warehouse' => (string) $element->ИдСклада,
    //   'region' => (string) $element->Регион,
    // ))->execute();

    if (!in_array($element->Регион, [GF_STOCK_REGION_RU, GF_STOCK_REGION_CN])) continue;
    // Запись непосредственно в таблицу, которая будет
    // использоваться в дальнейшем для отображения остатков по регионам.
    $fields = [];
    $fields['stock'] = $element->Остаток;
    if ($entity->guid2) {
      // Наличие guid2 сигнализирует о том, что у товара есть разновидности.
      // Записываем их данные в соответствующее поле.
      $fields['uc_combination'] = gf_stock_get_uc_combination($entity->nid, 
        $entity->guid2);
    }
    db_merge('gf_stock_stocks')
      ->key(array(
        'nid' => $entity->nid,
        'region' => $element->Регион,
        'guid2' => $entity->guid2,
      ))
      ->fields($fields)
      ->expression('stock', 'stock + :inc', array(':inc' => (int) $element->Остаток))
      ->execute();

  }
}


/**
 * Implements hook_node_load().
 */
function gf_stock_node_load($nodes, $types){
  if (!count(array_intersect(uc_product_types(), $types))) return;

  $result = db_query("SELECT *
    FROM {gf_stock_stocks}
    WHERE nid IN(:nids)", array(':nids' => array_keys($nodes),));

  // Добавляем при загрузке нод-товаров поля с данными
  // по остаткам в регионах.
  foreach ($result as $record) {
    $stock = (int) $record->stock;
    // Складываем суммы остатков в конкретном регионе для разных представлений.
    if ($record->guid2) {
      // Раскладываем остатки, основываясь на guid2(аттрибуты в ubercart).
      $uc_combo = unserialize($record->uc_combination);
      // $aid - ID атрибута(ubercart), $option_id - ID опции атрибута.
      // В новом свойстве ноды-товара родительский массив - регион.
      foreach ($uc_combo as $aid => $option_id){
        $nodes[$record->nid]->gf_region_stock_by_attr[$record->region][$aid][$option_id] = $stock;
      }
    }
    // Что бы не возникало ошибок в написанных ранее(Ильей) обработчиках
    // данного массива, оставляем остаток по регионам без учета рановидностей товара.
    // При наличии у тавара оных разновидностей - используем соответствующие данные
    // в массиве с guid2(условие выше).
    if (isset($nodes[$record->nid]->gf_region_stock[$record->region])) {
      $nodes[$record->nid]->gf_region_stock[$record->region] += $stock;
    }
    else{
      $nodes[$record->nid]->gf_region_stock[$record->region] = $stock;
    }
  }

  $prices = db_select('gf_stock_prices', 'p')
    ->fields('p', array('nid', 'price','price_id', 'currency'))
    ->condition('nid', array_keys($nodes), 'IN')
    ->execute()
    ->fetchAllAssoc('price_id');

  $price_map = _gf_stock_get_region_price_map();

  foreach ($prices as $price_id=>$price) {
    if (isset($price_map[$price_id])) {
      $price_value = $price->price;
      if (!isset($nodes[$prices[$price_id]->nid]->gf_region_stock[$price_map[$price_id]])) {
        // Проверяем наличие товара. Если в массиве остатков для текущего
        // региона нет нужного значения, тогда создаем его со значением остатков - 0.
        $nodes[$prices[$price_id]->nid]->gf_region_stock[$price_map[$price_id]] = 0;
        // Соответственно региональная цена тоже - ноль.
        $price_value = 0;
      }
      elseif ($price_map[$price_id] == GF_STOCK_REGION_CN) {
        // Если текущий регион Китай - совершаем некоторые манипуляции с его ценой.
        $cn_to_rub = variable_get('gf_stock_region_price_cny_as_rub', FALSE);

        if (drupal_strtolower($price->currency) != drupal_strtolower(GF_STOCK_CURRENCY_CN)) {
          // Проверяем, что текущая валюта пришла в юанях. Если
          // это не так, тогда задаем нулевую цену(из 1С цены пришли с ошибками).
          $price_value = 0;
        }
        elseif ($cn_to_rub) {
          // Если в настройках модуля есть указание конвертировать
          // юани в рубли для китайского склада - делаем.
          $price_value *= variable_get('gf_stock_yuan_exchange_rate', 1);
          // $price_value = _gf_stock_convert_to_default_currency((double) $price->price, 
            // $price->currency);
        }
      }

      $nodes[$prices[$price_id]->nid]->gf_region_prices[$price_map[$price_id]] = round($price_value);
      $nodes[$prices[$price_id]->nid]->gf_region_prices_original[drupal_strtolower($price->currency)] = round($price->price);
    }
  }
}

/**
 * Функция-хелпер для получения 
 * массива код_цены_региона=>индекс_региона('ru' или 'cn').
 */
function _gf_stock_get_region_price_map(){
  $result = [];
  foreach(array_keys(gf_stock_get_regions()) as $region) {
    $price_id = variable_get('gf_stock_region_price_' . $region);
    $result[$price_id] = $region;
  }
  return $result;
}

/**
 * Implements hook_menu().
 */
function gf_stock_menu() {
  // Линк для переключения региона пользователя.
  $items['gf_stock/region_switch'] = array(
    'title' => 'Stock Region Switcher',
    'page callback' => 'gf_stock_region_switch',
    'page arguments' => array(2),
    'access arguments' => array(
      'access content',
    ),
    'type' => MENU_CALLBACK,
  );
  // Страница настроек модуля.
  $items['admin/importkit/gf_stock'] = array(
    'title' => t('GF Stock'),
    'description' => 'GF Stock module settings',
    'access arguments' => array('administer importkit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['gf_stock_settings'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'gf_stock.admin.inc',
    'weight' => 2,
  );
  return $items;
}


/**
 * Массив со списком доступных регионов.
 */
function gf_stock_get_regions() {
  return [
    GF_STOCK_REGION_CN => GF_STOCK_REGION_CN,
    GF_STOCK_REGION_RU => GF_STOCK_REGION_RU
  ];

}


/**
 * Переключение региона пользователя.
 */
function gf_stock_region_switch($region=''){
  if(uc_cart_get_contents()) {
    drupal_set_message(t('You cannot change the warehouse region because there are already goods from another regional warehouse in your cart.'), 'warning');
  }
  else {
    if ($region) {
      $regions = gf_stock_get_regions();
      if (!in_array($region, $regions)) return;
      else {
        // Метку о выбранном регионе кладем пользователю в сессию.
        $_SESSION['gf_stock_region'] = $regions[$region];
      }
    }
    // Если регион не получен - обнуляем параметр в сессии.
    elseif (isset($_SESSION['gf_stock_region'])) {
      unset($_SESSION['gf_stock_region']);
    }
  }

  drupal_goto();
}


/**
 * Implements hook_block_info().
 *
 */
function gf_stock_block_info() {
  $blocks['gf_stock_region_switch'] = array(
    'info' => t('GF Stock: user region switcher'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 */
function gf_stock_block_view($delta = '') {
  switch ($delta) {
  case 'gf_stock_region_switch':
    $block['subject'] = t('Select warehouse region');
    $block['content'] = gf_stock_block_contents($delta);
    break;
  }
  return $block;
}

/**
 * Формируем содержимое для объявленных в модуле блоков.
 */
function gf_stock_block_contents($block) {
  switch ($block) {
  case 'gf_stock_region_switch':
    $regions = [];

    $region_switch_path = 'gf_stock/region_switch';
    $link_options = [
      'query' => drupal_get_destination(),
      'html' => true,
    ];

    //$regions[GF_STOCK_REGION_ALL] = l(t('All'), $region_switch_path, $link_options);

    $current_region = gf_stock_get_current_region();

    foreach(array_keys(gf_stock_get_regions()) as $region) {
      $region_data = ($current_region === $region) ? t($region) : 
        l(t($region), $region_switch_path . '/' . $region, $link_options);
      $regions[$region] = $region_data;
    }
    return theme('gf_stock_block_region_switcher', [
      'regions' => $regions,
      'current_region' => $current_region
    ]);
  }
}


/**
 * Возврат текущего региона пользователя.
 */
function gf_stock_get_current_region() {
  $default_region = variable_get('gf_stock_default_region', GF_STOCK_REGION_RU);
  return isset($_SESSION['gf_stock_region']) ? $_SESSION['gf_stock_region'] : $default_region;
}


/**
 * Implements hook_theme().
 */
function gf_stock_theme($existing, $type, $theme, $path) {
  return [
    'gf_stock_block_region_switcher' => [
      'variables' => [
        'regions' => [],
        'current_region' => NULL,
      ],
      'path' => drupal_get_path('module', 'gf_stock') . '/theme',
      'template' => 'gf_stock_block_region_switcher',
    ],
  ];

}


/**
 * Implements hook_views_api().
 */
function gf_stock_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'gf_stock') . '/views',
  );
}

/**
 * Получение актуального курса юаня к рублю.
 */
function _gf_stock_get_yuan_exchange_rate() {
  $url_json = 'https://www.cbr-xml-daily.ru/daily_json.js';
  try {
    $data = json_decode(file_get_contents($url_json));
    $nominal = $data->Valute->CNY->Nominal;
    $rate = ($data->Valute->CNY->Value / (int)$nominal);
    $date = $data->Date;
  } catch(Exception $e) {
    watchdog('gf_stock', $e->getMessage(), array(), WATCHDOG_ERROR);
    return;
  }
  return array(
    'rate' => $rate, 
    'date' => $date
  );
}

/**
 * Обновление курса юаня, используемого при конвертациях на сайте.
 */
function gf_stock_update_yuan_exchange_rate() {
  if($data = _gf_stock_get_yuan_exchange_rate()){
    variable_set('gf_stock_yuan_exchange_rate', $data['rate'] );
    variable_set('gf_stock_yuan_rate_last_update', $data['date'] );
  }
}

/**
 * Implements hook_cron().
 *
 * Обновляем курс юаня к рублю по крону раз в сутки.
 */
function gf_stock_cron() {
  $last_update = variable_get('gf_stock_yuan_rate_last_update', 0);
  $time_passed = (REQUEST_TIME - strtotime($last_update));
  if ($time_passed > (60*60*24)) {
    gf_stock_update_yuan_exchange_rate();
  }
}


/**
 * Implements hook_uc_cart_alter().
 *
 * Правим цену в корзине в соответствии с регионом заказа
 */
/*function gf_stock_uc_cart_alter(&$items) {
  $region_stock = FALSE;
  if (user_has_role(18) or user_has_role(19)) { $extra_10 = true; }

  foreach ($items as $key => $item) {
    $discount = FALSE;

    if (isset($item->field_discount['und'])) {
      $field_discount_tid = $item->field_discount['und'][0]['tid'];
      $discount_term = taxonomy_term_load($field_discount_tid);
      $discount_raw_percent = $discount_term->name;
      $discount_percent = substr($discount_raw_percent, 0, strpos($discount_raw_percent, '%'));
      $discount = TRUE;
    }

    if ($region_stock == FALSE and $item->data["region_stock"]) {
      $region_stock = $item->data["region_stock"];
    }

    if ($discount) {
      if ($extra_10) {
        $discount_percent += 10;
      }
      $discount_coefficient = 1.0 - $discount_percent / 100;
      $item->cost = $item->price;

      if ($region_stock == "Russia") {
        $item->price = $item->gf_region_prices["Russia"] * $discount_coefficient;
        $item->sell_price = $item->price;
      } elseif ($region_stock == "China") {
        $item->price = $item->gf_region_prices["China"] * $discount_coefficient;
        $item->sell_price = $item->price;
      }
    } elseif ($extra_10) {
      if ($region_stock == "Russia") {
        $discount_coefficient = 1.0 - 10 / 100;
        $item->price = $item->gf_region_prices["Russia"] * $discount_coefficient;
        $item->sell_price = $item->price;
      }
      elseif ($region_stock == "China") {
        $discount_coefficient = 1.0 - 10 / 100;
        $item->price = $item->gf_region_prices["China"] * $discount_coefficient;
        $item->sell_price = $item->price;
      }
    } else {
      $item->cost = $item->price;

      if ($region_stock == "Russia") {
        $item->price = $item->gf_region_prices["Russia"];
      }
      elseif ($region_stock == "China") {
        $item->price = round($item->gf_region_prices["China"]);
      }
    }
  }
}
 */

/**
 * Implements hook_uc_add_to_cart_data().
 */
function gf_stock_uc_add_to_cart_data($form_values) {
  if (isset($form_values['nid'])) {
    $node = node_load($form_values['nid']);
    $output = array(
      'shippable' => isset($node->shippable) ? $node->shippable : variable_get('uc_product_shippable_' . $node->type, 1),
      'type' => $node->type,
    );
  }
  else {
    $output = array(
      'shippable' => variable_get('uc_product_shippable_product', 1),
      'type' => 'product',
    );
  }

  $output['region_stock'] = gf_stock_get_current_region();
  return $output;
}


/**
 * Implements hook_uc_checkout_complete().
 */
function gf_stock_uc_checkout_complete($order, $account) {
  // Декрементим количество в стоках на основе заказанного.
  foreach ($order->products as $pid=>$data) {
    // Добавляем проверку на товар с атрибутами.
    $guids = explode('#', $data->guid);
    $guid2 = isset($guids[1]) ? $guids[1] : '';
    try {
      db_update('gf_stock_stocks')
        ->expression('stock', 'stock - :qty', array(':qty' => $data->qty))
        ->condition('nid', $data->nid)
        ->condition('region', $data->data['region_stock'])
        ->condition('guid2', $guid2)
        ->execute();
    } catch(Exception $e) {
      watchdog('gf_stock', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
  }
}

/**
 * Получаем варианты нужного товара.
 */
function gf_stock_get_uc_combination($nid, $guid2) {
  $query = db_select('importkit_cml_offers', 'o')
    ->fields('o', array('uc_combination'))
    ->condition('o.nid', $nid)
    ->condition('o.guid2', $guid2)
    ->execute()
    ->fetchField();

  return (is_null($query)) ? '' : $query;
}

/**
 * Implements hook_uc_form_alter().
 * 
 * Изменяем форму добавления товара в корзину для отображения
 * остатков по каждому атрибуту(guid2), если таковые имеются.
 */
function gf_stock_uc_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'add_to_cart_form') || $form_id == 'uc_order_add_product_form') {
    $node = &$form['node']['#value'];
    $region = gf_stock_get_current_region();
    if (isset($node->attributes) && isset($node->gf_region_stock_by_attr[$region])) {
      $stock_by_attr = $node->gf_region_stock_by_attr[$region];
      foreach ($stock_by_attr as $aid => $oids) {
        foreach ($oids as $oid => $stock) {
          $node->attributes[$aid]->options[$oid]->name .= t(' (stock: !stock)', 
            ['!stock'=>$stock]);
        }
      }
    }
  }
}
